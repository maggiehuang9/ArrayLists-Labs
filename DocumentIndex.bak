/**
 * DocumentIndex
 *
 * @author Maggie Huang
 * @version 4/12/18
 */
import java.util.ArrayList;

public class DocumentIndex extends ArrayList<IndexEntry>
{
  //  Creates an empty DocumentIndex with the default
  // initial capacity.
  public DocumentIndex()
  {
    super();
  }

  //  Creates an empty DocumentIndex with a given
  //  initial capacity.
  public DocumentIndex(int initialCapacity)
  {
    super(initialCapacity);
  }


  //  If word is not yet in this DocumentIndex,
  //  creates a new IndexEntry for word, and inserts
  //  it into this list in alphabetical order, using
  //  foundOrInserted as a helper method;
  //  adds num to this word's IndexEntry by calling
  //  its add(num) method.
  public void addWord(String word, int num)
  {
     int index = foundOrInserted(word); // find the location of the word in the list
     this.get(index).add(num);
  }


  //  For each word in str, calls addWord(word, num)
  //  if the length of the word is > 0.
  public void addAllWords(String str, int num)
  {
      String[] words = str.split("\\W+");  // split the string into words delimited by non-word character
      for (int i=0; i<words.length;i++)
          addWord(words[i],num);  // add each word to the list
  }


  // Tries to find an IndexEntry with a given word in this
  // DocumentIndex.  If not found, inserts a new IndexEntry for
  // word at the appropriate place (in lexicographical order).
  // Returns the index of the found or inserted IndexEntry
  private int foundOrInserted(String word)
  {

      String upper_word = word.toUpperCase();
      
      for (int i=0; i<size(); i++)
      {
          String currentWord = this.get(i).getWord();
          if (currentWord.compareTo(upper_word)>0) // insert word here
          {
              this.add(i, new IndexEntry(word));
              return i;
          } else if (currentWord.compareTo(upper_word)==0) // word already exist
          {
              return i;
          }
      }
      
      // reach, add this word to the end of the list
      this.add(new IndexEntry(word));
      return size()-1;
  }
}
